
/*
3. The final use case is what is termed in the web world as the holy grail layout. The holy grail layout is a page with the header, footer and three columns. The center column contains the main content. In the left and right columns it contains additional content like navigation or ads. So a header, footer - sitemaps and the main content, this is what we are going to build with flexbox. To begin with, I have an empty body tag and empty CSS. So, let's begin with the HTML first. We need a header and let the class be flex-header. The text is going to be 'HEADER' as well. Next the main content of the page, so this is going to have a class flex-main. The main content has three parts - first is the site navigation. So a nav tag with the class of flex-nav. This is going to be 'SIDENAV'. Next an article tag with the class flex-article which is the main focus of our page. And lastly a sidebar aside with the class of flex-aside and the text is going to be 'SIDEBAR'. Now you might have noticed. I am following semantic HTML instead of regular div tags. It is just a better way to write HTML. Finally, a footer tag with the class of flex-footer and the text is going to be 'FOOTER'. All right, that's it for our HTML. Next, let's add all the styling. I'm going to start off with the universal selector and then add a margin of 2px. This is only to visually separate the different sections of our web page. Next, let's work on the body tag the body tag is going to have a font-size, a color of white, a height of 100vh and text-align of center. Next, let's focus on the individual sections first up the header. So we have the class flex-header which has a background-color, a padding-top and a padding-bottom. Next is the main tag, the corresponding class is flex-main. Now we are going to leave this empty for now and let's take a look at the side navigation. First the class is going to be flex-nav. We're going to set a background-color and padding-top. Similarly, we are going to have the class flex-article which has a background-color and padding-top. flex-aside has background-color, padding-top. Finally in the footer class which is flex-footer and this is similar to the header class. So background-color, padding-top and padding-bottom are same as header has. Now if I save this and refresh the browser, you should see the different sections one on top of the other. So we have a header, sidenav, main content, sidebar and then the footer. Now the first step is to create a Flex container so that we can start using the different flex properties. And for our holy grail layout, the body tag itself becomes the Flex container. Now we are going to set display to flex and the flex-direction is going to be column. We want the sections of the webpage to flow from the top to the bottom. So flex-direction of column is very much necessary. Now if I go back to the browser and refresh, you can see that visually it changes nothing. Whatsoever, so let's make a few more changes. We want the sidenav, the main content and sidebar to be placed horizontally not stacked up. So to the main to the flex-main class that we had initially. We are going to set display property of flex, refresh, you can see that we are making progress. The columns are next to each other but we definitely want them to take up the extra space both horizontally and vertically. Now to grow the main content vertically set the flex property to 1. So go back to your flex-main and set flex as 1 and refresh the browser, you can see that it takes up the extra space that was available vertically. To take up the horizontal space, we need to add the flex property on the individual flex items. On the sidenav, on the main content and on the sidebar, so for both the sidenav and the sidebar add flex and set it to 1 1 5rem. 5rem sets the flex-basis which is the initial width. To begin with for the main content, we are still going to add the flex property but with different values. We want the main content to take up more of the additional space compared to the sidenav and sidebar. So, we set flex to 3 and 3. The main content will grow and shrink three times as quickly as the sidenav and sidebar. Now if you refresh, the Holy Grail layout is ready. You can resize to play around with the width and you can set them accordingly. Now if you decrease the width to a large extent though the layout doesn't really look great. So let's make it responsive as well. Again that is really simple. Go back to the CSS file and add a media query. I'm going to set a media query at max width of 540px on the flex-main class. We add flex-direction to column. So the flex-main which has sidenav, main content and sidebar, instead of being placed horizontally will stack up when we reduce the browser width to less than 540px. So save this. Go back to the browser. Refresh it. Start decreasing the width and once it goes below 540px, you can see that they stack and it becomes more of a responsive layout. There you go really really simple for liquor a layout with flexbox. 
*/
