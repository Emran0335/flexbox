/*
1. All right, a next use case deals with variable heights. Again I'm starting off with an empty body tag and no styles. All right, let's start with a simple scenario placing two items side by side. Now I have a div tag with a class container within the div tag two more div tags the first one has a class of item1 and the second div has a class of item2. The text for item1 is "this is a flex item" and the text for item2 is going to be a really long paragraph. You can see that it's pretty lengthy. Now in the CSS, I'm going to add a font-size to 1.5rem in the container class. I'm also going to add a background-color to the individual item classes item1 and then item2. Now if I save this and then refresh the browser, you can see that the item2 is below the item1. However we need them side-by-side for that we make use of float. So let's go back to the CSS for item1, we are going to add a property float:left. For item2, we are going to add a property float:right. Now if I save this and refresh the browser, you can see that it is still not right to fix this. We need to set the width for each item. So item1 is going to have a width of 30% and item2 is going to have a width of 70%. Now refresh and you can see that they are finally beside each other. But hang on, the height is not the same for both the items. And this has been a common issue. Getting equal height on the children of a container, thankfully flexbox easily solves this. So, let me show you the changes. I'm going to go back to the CSS and I'm going to remove these unwanted Styles float and width instead. All we need is the display property on the Flex container set to flex. So display flex, now if I refresh, you can see that the items are beside each other. The width is automatically set to content width and the height of both the columns are also equal. So with just one property we are able to achieve columns of equal heights.

In flexbox, now a similar scenario is when we are dealing with card footers. So let me show you with an example, I'm going to go back to visual studio code and then in the variable-height.html file, I'm going to copy paste the HTML. So you can see that first, we have a div tag with a class cards within this div tag we are going to have two cards. So div class is equal to card and div class is equal to card. The card body has a paragraph tag with some text inside and the footer also has some text. The second div tag has a very lengthy paragraph as the card body but the footer still remains the same in the text footer. When I go back to the browser and refresh, you can see that the two cards are one below the other. We definitely want them beside each other. So I'm going to go back to the CSS to clear this out. And add the class cards with display set to flex. Now, you can see that the cards are beside each other. Next, let's add a few properties to the card class. I'm going to go back to the CSS and I'm going to paste the styling. So on the card class, we have a font-size of 1.5rem, a border, a margin, align-text to the center, the display property set to flex, flex-direction set to column so that they flow from top to bottom. On the card footer, we have simply a padding of 5px and the background-color of #f1f1f1. Now if I refresh the browser, you can see that we have two cards beside each other but we can clearly notice that the footer is not where we want it to be. The placement of the footer is completely dependent on the body content. So you can see that the footer is at the very bottom in card 2 but in card 1 the footer is not sticking to the bottom. And this is a very common issue when you deal with cards without a flexbox module. But with flexbox, all we need is the flex property on the card body set to 1. I'm going to go back to the CSS card body and set flex to 1(flex-grow: 1). We are basically telling the body to grow to fill up the space wherever possible. So refresh the browser and you can see the result the footer alignment is same in both the cards. Now you find these type of card layouts with for example shipping addresses in e-commerce sites and a product information where you have a product image product description in the card body and then a Buy Now button as the card footer. So you definitely don't want either the shipping address height or the product description to completely mess up your footer alignment. So by setting flex to 1 on the card body, the footer gets pushed down to the very bottom. All right, so you can see that flexbox plays really well with unknown height.

*/
