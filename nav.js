/*
// Practice - 1
// Navbar practice

Let's build a simple responsive navbar. A navbar is a common pattern for navigation where we have a list of items displayed as a horizontal bar. As simple as it may sound. There was a lot of struggle to get this done. So let's see how to build a navbar with flexbox. So I have an HTML and CSS file. The body of the HTML is empty and so is the CSS. First, let's write the mark-up. I'm going to start off with a nav tag and within the nav tag, an unordered list. Now, this unordered list is going to contain four list items - home, about, services and contact. And that's pretty much our HTML. Let's add some styling in the CSS file. Let me quickly copy/paste the style and then go through each of them individually. Alright, so we have the nav tag which has a font-size of 2rem and a background-color of #f1f1f1. The unordered list has a list style type of none, margin:0 padding:0. Each of the list item has a cursor:pointer and then padding of 0.5rem. And then on hovering off the list item, we just changed the font-color and the background-color. Now if you save these files and take a look at the browser, you can see that our HTML shows up but definitely not how we want it to be. They are vertically stacked up instead of being placed side-by-side. You have to convert this into a navbar. We simply make the unordered list tag as a Flex container. So on this particular style, the UL under nav we are going to add display-flex. Now if take a look at the browser, you can see that the items are placed next to each other. Perfect! But we end up with some additional space. We can deal with this extra space in two ways. 1. We either add the space around the items or 2. We add the space as part of the item itself such as padding to the text. Let's take a look at the first case, now to distribute the space around the items. We use the justify-content property to space-around. So to the unordered list, specify justify-content and this is going to be space-around. If I refresh, you can see that it looks like a navbar much more. So, now than before when I hover on the menus, you can see that it highlights only around the text content what you want. But if you want the spacing to be part of the menu item itself, you can use the flex property on the individual items. So on each list item, we can set flex to auto(flex-grow: 1, flex-shrink: 1, flex-basis: auto). Then we are also going to align the text to the center. And finally comment justify-content property. So now if you go back to the browser and refresh, there you go the space is distributed within the item. Finally, let's make it responsive by adding a media query. Let me quickly paste the media query and you can see that all we do in the media query is change the flex-direction from row to column. On the unordered list by doing, so the menu items flow from top to bottom. And we have set the max-width to 400px. So when we reduce the browser size to less than 400px, these properties are going to be applied. Let's take a look. I'm going to go back to the browser and refresh it. Now as I slowly start reducing the browser size and go below 400px, you can see that the menu items stack on top of each other and the navbar is responsive. Pretty simple right, so just to recollect on the Flex container which is the UL tag we set display to flex and justify-content to space-around. If you want the space to be distributed within the items, we set flex to auto on each of the list items and get a responsive navbar adding a media query. We set flex-direction to column.
*/
